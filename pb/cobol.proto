syntax = "proto3";

package pb;

option go_package = "github.com/kaisawind/cobol/pb;pb";


message Program {
    repeated CompilationUnit compilation_units = 1;
}

message CompilationUnit {
    string name = 1;
    repeated ProgramUnit program_units = 2;
}

message ProgramUnit {
    IdentificationDivision identification_division = 1;
    EnvironmentDivision environment_division = 2;
    DataDivision data_division = 3;
    ProcedureDivision procedure_division = 4;
}

message IdentificationDivision {
    ProgramIdParagraph program_id_paragraph = 1;
    AuthorParagraph author_paragraph = 2;
    DateCompiledParagraph date_compiled_paragraph = 3;
    DateWrittenParagraph date_written_paragraph = 4;
    InstallationParagraph installation_paragraph = 5;
    RemarksParagraph remarks_paragraph = 6;
    SecurityParagraph security_paragraph = 7;
}

message ProgramIdParagraph {
    enum Attribute {
        COMMON = 0;
        DEFINITION = 1;
        INITIAL = 2;
        LIBRARY = 3;
        RECURSIVE = 4;
    }
    string name = 1;
    Attribute attribute = 2;
}

message AuthorParagraph {
    string author = 1;
}

message DateCompiledParagraph {
    string date_compiled = 1;
}

message DateWrittenParagraph {
    string date_written = 1;
}

message InstallationParagraph {
    string installation = 1;
}

message RemarksParagraph {
    string remarks = 1;
}

message SecurityParagraph {
    string security = 1;
}

message EnvironmentDivision {
    ConfigurationSection configuration_section = 1;
    InputOutputSection input_output_section = 2;
    SpecialNamesParagraph special_names_paragraph = 3;
}

message ConfigurationSection {
    ObjectComputerParagraph object_computer_paragraph = 1;
    SourceComputerParagraph source_computer_paragraph = 2;
}

message ObjectComputerParagraph {
    string name = 1;
    CharacterSetClause character_set_clause = 2;
    CollatingSequenceClause collating_sequence_clause = 3;
    DiskSizeClause disk_size_clause = 4;
    MemorySizeClause memory_size_clause = 5;
    SegmentLimitClause segment_limit_clause = 6;
}

message CharacterSetClause {

}

message CollatingSequenceClause {
    string national = 1;
    string alphanumeric = 2;
    repeated string alphabet_names = 3;
}

message DiskSizeClause {
    enum Unit {
        MODULES = 0;
        WORDS = 1;
    }
    Unit unit = 1;
    ValueStmt value_stmt = 2;
}

message ValueStmt {
    oneof one_of {
        IntegerLiteral integer_literal = 1;
        Call call = 2;
    }
}

message MemorySizeClause {
    enum Unit {
        CHARACTERS = 0;
        MODULES = 1; 
        WORDS = 2;
    }
    Unit unit = 1;
    ValueStmt value_stmt = 2;
}

message SegmentLimitClause {
    IntegerLiteral integer_literal = 1;
}

message IntegerLiteral {
    string value = 1;
}

message SourceComputerParagraph {
    string name = 1;
    bool debugging_mode = 2;
}

message InputOutputSection {
    FileControlParagraph file_control_paragraph = 1;
    IoControlParagraph io_control_paragraph = 2;
}

message FileControlParagraph {
    repeated FileControlEntry file_control_entries = 1;
}

message FileControlEntry {
    string name = 1;
    AccessModeClause access_mode_clause = 2;
    AlternateRecordKeyClause alternate_record_key_clause = 3;
    AssignClause assign_clause = 4;
    FileDescriptionEntry file_description_entry = 5;
    FileStatusClause file_status_clause = 6;
    OrganizationClause organization_clause = 7;
    PaddingCharacterClause padding_character_clause = 8;
    PasswordClause password_clause = 9;
    RecordDelimiterClause record_delimiter_clause = 10;
    RecordKeyClause record_key_clause = 11;
    RelativeKeyClause relative_key_clause = 12;
    ReserveClause reserve_clause = 13;
    SelectClause select_clause = 14;
    repeated FileControlEntryCall calls = 15;
}

message FileControlEntryCall {
    FileControlEntry file_control_entry = 1;
}

message AccessModeClause {
    enum Mode {
        DYNAMIC = 0;
        EXCLUSIVE = 1;
        RANDOM = 2;
        SEQUENTIAL = 3;
    }
    Mode mode = 1;
}

message AlternateRecordKeyClause {
    PasswordClause password_clause = 1;
    Call data_call = 2;
}

message UndefinedCall {
    string name = 1;
}

message Call {
    oneof one_of {
        UndefinedCall undefined = 1;
    }
}

message AssignClause {
    enum Type {
        CALL = 0;
        DISK =  1;
        DISPLAY = 2;
        KEYBOARD = 3;
        PORT = 4;
        PRINTER = 5;
        READER = 6;
        REMOTE = 7;
        TAPE = 8;
        VIRTUAL = 9;
    }

    Type type = 1;
    ValueStmt to_value_stmt = 2;
}

message FileDescriptionEntry {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    Type type = 1;
    Call file_call = 2;
    FileControlEntry file_control_entry = 3;
    string name = 4;
    BlockContainsClause block_contains_clause = 5;
    CodeSetClause code_set_clause = 6;
    DataRecordsClause data_records_clause = 7;
    ExternalClause external_clause = 8;
    GlobalClause global_clause = 9;
    LabelRecordsClause label_records_clause = 10;
    LinageClause linage_clause = 11;
    RecordContainsClause record_contains_clause = 12;
    ReportClause report_clause = 13;
    ValueOfClause value_of_clause = 14;
}

message BlockContainsClause {
    enum Unit {
        CHARACTERS = 0;
        RECORDS = 1;
    }
    IntegerLiteral from = 1;
    IntegerLiteral to = 2;
    Unit unit = 3;
}

message CodeSetClause {
    string alphabet_name = 1;
}

message DataRecordsClause {
    repeated Call data_calls = 1;
}

message ExternalClause {
    bool external = 1;
}

message GlobalClause {
    bool global = 1;
}

message LabelRecordsClause {
    enum Type {
        DATA_NAMES = 0;
        OMITTED = 1;
        STANDARD = 2;
    }
    Type type = 1;
    repeated Call data_calls = 2;
}

message LinageClause {
    ValueStmt footing_at_value_stmt = 1;
    ValueStmt lines_at_bottom_value_stmt = 2;
    ValueStmt lines_at_top_value_stmt = 3;
    ValueStmt number_of_lines_value_stmt = 4;
}

message RecordContainsClause {
    Call depending_on_call = 1;
    IntegerLiteral from = 2;
    IntegerLiteral to = 3;
    bool varying = 4;
}

message ReportClause {
    repeated Call report_calls = 1;
}

message ValueOfClause {
    repeated ValueOfNameValuePair value_pairs = 2;
}

message ValueOfNameValuePair {
    Call name_call = 1;
    ValueStmt value = 2;
}

message FileStatusClause {
    Call data_call1 = 1;
    Call data_call2 = 2;
}

message OrganizationClause {
    enum Mode {
        INDEXED = 0;
        RELATIVE = 1;
        SEQUENTIAL = 2;
    }

    enum Type {
        BINARY = 0;
        LINE = 1;
        RECORD = 2;
        RECORD_BINARY = 3;
    }

    Mode mode = 1;
    Type type = 2;
}

message PaddingCharacterClause {
    ValueStmt value_stmt = 1;
}

message PasswordClause {
    Call data_call = 1;
}

message RecordDelimiterClause {
    enum Type {
        ASSIGNMENT = 0;
        IMPLICIT = 1;
        STANDARD_1 = 2;
    }
    Type type = 1;
    ValueStmt value_stmt = 2;
}

message RecordKeyClause {
    PasswordClause password_clause = 1;
    Call record_key_call = 2;
}

message RelativeKeyClause {
    Call relative_key_call = 1;
}

message ReserveClause {
    IntegerLiteralValueStmt value_stmt = 1;
}

message IntegerLiteralValueStmt {
    IntegerLiteral integer_literal = 1;
}

message SelectClause {
    string name = 1;
    bool optional = 2;
    Call file_call = 3;
}

message IoControlParagraph {
    CommitmentControlClause commitment_control_clause = 1;
    Call file_call = 2;
    MultipleFileClause multiple_file_clause = 3;
    RerunClause rerun_clause = 4;
    repeated SameClause same_clauses = 5;
}

message CommitmentControlClause {
    Call file_call = 1;
}

message MultipleFileClause {
    repeated MultipleFilePosition multiple_file_positions = 1;
}

message MultipleFilePosition {
    IntegerLiteralValueStmt value_stmt = 1;
    Call file_call = 2;
}

message RerunClause {
    ValueStmt on_value_stmt = 1;
    RerunEveryClock rerun_every_clock = 2;
    RerunEveryOf rerun_every_of = 3;
    RerunEveryRecords rerun_every_records = 4;
}

message RerunEveryClock {
    IntegerLiteral clock_units = 1;
}

message RerunEveryOf {
    enum Type {
        REEL = 0;
        UNIT = 1;
    }
    Type type = 1;
    Call file_call = 2;
}

message RerunEveryRecords {
    IntegerLiteral records = 1;
}

message SameClause {
    enum Form {
        RECORD = 0;
        SORT = 1;
        SORT_MERGE = 2;
    }
    repeated Call file_calls = 1;
    Form form = 2;
}

message SpecialNamesParagraph {
    repeated AlphabetClause alphabet_clauses = 1;
    ChannelClause channel_clause = 2;
    ClassClause class_clause = 3;
    CurrencySignClause currency_sign_clause = 4;
    DecimalPointClause decimal_point_clause = 5;
    DefaultDisplaySignClause default_display_sign_clause = 6;
    OdtClause odt_clause = 7;
    ReserveNetworkClause reserve_network_clause = 8;
    SymbolicCharactersClause symbolic_characters_clause = 9;
}

message AlphabetClause {
    Call alphabet_call = 1;
}

message ChannelClause {
    IntegerLiteral integer_literal = 1;
    MnemonicName mnemonic_name = 2;
}

message MnemonicName {
    string value = 1;
}

message ClassClause {
    enum Type {
        ALPHA_NUMERIC = 0;
        NATIONAL = 1;
    }
    Call class_call = 1;
    Type type = 2;
    repeated ClassThrough class_throughs = 3;
}

message ClassThrough {
    ValueStmt from = 1;
    ValueStmt to = 2;
}

message Literal {
    enum Type {
        BOOLEAN = 0;
        CICS_DFH_RESP = 1;
        CICS_DFH_VALUE = 2;
        FIGURATIVE_CONSTANT = 3;
        NON_NUMERIC = 4;
        NUMERIC = 5;
    }
    Type type = 1;
    oneof one_of {
        NumericLiteral numeric_literal = 2;
        BooleanLiteral boolean_literal = 3;
        string non_numeric_literal = 4;
        FigurativeConstant figurative_constant = 5;
    }
}

message FigurativeConstant {
    enum Type {
        ALL = 0;
        HIGH_VALUE = 1;
        HIGH_VALUES = 2;
        LOW_VALUE = 3;
        LOW_VALUES = 4;
        NULL = 5;
        NULLS = 6;
        QUOTE = 7;
        QUOTES = 8;
        SPACE = 9;
        SPACES = 10;
        ZERO = 11;
        ZEROES = 12;
        ZEROS = 13;
    }
    Type type = 1;
    Literal literal = 2;
}

message BooleanLiteral {
    bool value = 1;
}

message NumericLiteral {
    enum Type {
        FLOAT = 0;
        INTEGER = 1;
    }
    Type type = 1;
    string value = 2;
}

message CurrencySignClause {
    Literal currency_literal = 1;
    Literal picture_symbol_literal = 2;
}

message DecimalPointClause {

}

message DefaultDisplaySignClause {
    enum Type {
        LEADING = 0;
        TRAILING = 1;
    }

    Type type = 1;
}

message OdtClause {
    MnemonicName mnemonic_name = 1;
}

message ReserveNetworkClause {

}

message SymbolicCharactersClause {
    enum Type {
        ALPHA_NUMERIC = 0;
        NATIONAL = 1;
    }
    Type type = 1;
}

message DataDivision {
    CommunicationSection communication_section = 1;
    DataBaseSection data_base_section = 2;
    FileSection file_section = 3;
    LinkageSection linkage_section = 4;
    LocalStorageSection local_storage_section = 5;
    ProgramLibrarySection program_library_section = 6;
    ReportSection report_section = 7;
    ScreenSection ScreenSection = 8;
    WorkingStorageSection working_storage_section = 9;
}

message WorkingStorageSection {
    DataDescriptionEntryContainer.Type container_type = 1;
}

message DataDescriptionEntryContainer {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    Type type = 1;
}

message ScreenSection {
    repeated ScreenDescriptionEntry screen_description_entries = 1;
}

message ScreenDescriptionEntry {
    // TODO:
}

message ReportSection {
    repeated ReportDescription report_descriptions = 1;
}

message ReportDescription {
    // TODO:
}

message ProgramLibrarySection {
    repeated LibraryDescriptionEntry library_description_entries = 1;
}

message LibraryDescriptionEntry {
    // TODO:
}

message LocalStorageSection {
    DataDescriptionEntryContainer.Type container_type = 1;
    string name = 2;
}

message LinkageSection {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    Type type = 1;
}

message FileSection {
    repeated FileDescriptionEntry file_description_entries = 1;
}

message CommunicationSection {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    repeated CommunicationDescriptionEntry communication_description_entries = 1;
    Type type = 2;
}

message CommunicationDescriptionEntry {

}

message DataBaseSection {
    repeated DataBaseSectionEntry data_base_section_entries = 1;
}

message DataBaseSectionEntry {

}

message ProcedureDivision {

}