syntax = "proto3";

package pb;

option go_package = "github.com/kaisawind/cobol/pb;pb";


message Program {
    repeated CompilationUnit compilation_units = 1;
}

message CompilationUnit {
    string name = 1;
    repeated ProgramUnit program_units = 2;
}

message ProgramUnit {
    IdentificationDivision identification_division = 1;
    EnvironmentDivision environment_division = 2;
    DataDivision data_division = 3;
    ProcedureDivision procedure_division = 4;
}

message IdentificationDivision {
    ProgramIdParagraph program_id_paragraph = 1;
    AuthorParagraph author_paragraph = 2;
    DateCompiledParagraph date_compiled_paragraph = 3;
    DateWrittenParagraph date_written_paragraph = 4;
    InstallationParagraph installation_paragraph = 5;
    RemarksParagraph remarks_paragraph = 6;
    SecurityParagraph security_paragraph = 7;
}

message ProgramIdParagraph {
    enum Attribute {
        COMMON = 0;
        DEFINITION = 1;
        INITIAL = 2;
        LIBRARY = 3;
        RECURSIVE = 4;
    }
    ProgramName program_name = 1;
    Attribute attribute = 2;
}

message AuthorParagraph {
    string author = 1;
}

message DateCompiledParagraph {
    string date_compiled = 1;
}

message DateWrittenParagraph {
    string date_written = 1;
}

message InstallationParagraph {
    string installation = 1;
}

message RemarksParagraph {
    string remarks = 1;
}

message SecurityParagraph {
    string security = 1;
}

message EnvironmentDivision {
    ConfigurationSection configuration_section = 1;
    InputOutputSection input_output_section = 2;
    SpecialNamesParagraph special_names_paragraph = 3;
}

message ConfigurationSection {
    ObjectComputerParagraph object_computer_paragraph = 1;
    SourceComputerParagraph source_computer_paragraph = 2;
    SpecialNamesParagraph special_names_paragraph = 3;
}

message SourceComputerParagraph {
    ComputerName computer_name = 1;
    bool debugging_mode = 2;
}

message ObjectComputerParagraph {
    ComputerName computer_name = 1;
    MemorySizeClause memory_size_clause = 2;
    DiskSizeClause disk_size_clause = 3;
    CollatingSequenceClause collating_sequence_clause = 4;
    SegmentLimitClause segment_limit_clause = 5;
    CharacterSetClause character_set_clause = 6;
}

message MemorySizeClause {
    enum Unit {
        CHARACTERS = 0;
        MODULES = 1; 
        WORDS = 2;
    }
    Unit unit = 1;
    oneof memory_size {
        IntegerLiteral integer_literal = 2;
        CobolWord cobol_word = 3;
    };
}

message DiskSizeClause {
    enum Unit {
        MODULES = 0;
        WORDS = 1;
    }
    Unit unit = 1;
    oneof disk_size {
        IntegerLiteral integer_literal = 2;
        CobolWord cobol_word = 3;
    };
}

message CollatingSequenceClause {
    AlphabetName national = 1;
    AlphabetName alphanumeric = 2;
    repeated AlphabetName alphabet_names = 3;
}

message SegmentLimitClause {
    IntegerLiteral segment_limit = 1;
}

message CharacterSetClause {

}

message SpecialNamesParagraph {
    repeated AlphabetClause alphabet_clauses = 1;
    ChannelClause channel_clause = 2;
    ClassClause class_clause = 3;
    CurrencySignClause currency_sign_clause = 4;
    DecimalPointClause decimal_point_clause = 5;
    DefaultDisplaySignClause default_display_sign_clause = 6;
    OdtClause odt_clause = 7;
    ReserveNetworkClause reserve_network_clause = 8;
    SymbolicCharactersClause symbolic_characters_clause = 9;
}

message AlphabetClause {
    message AlphabetLiteral {
        Literal literal = 1;
        repeated Literal throughs = 2;
        repeated Literal alsos = 3;
    }
    message Alphanumeric {
        enum Type {
            EBCDIC = 0;
            ASCII = 1;
            STANDARD_1 = 2;
            STANDARD_2 = 3;
            NATIVE = 4;
        }
        Type type = 1;
        repeated AlphabetLiteral values = 2;
    }
    message National {
        enum Type {
            NATIVE = 0;
            CCSVERSION = 1;
        }
        Type type = 1;
        Literal ccs_version = 2;
    }
    AlphabetName alphabet_name = 1;
    oneof one_of {
        Alphanumeric alphanumeric = 2;
        National national = 3;
    }
}

message ChannelClause {
    IntegerLiteral Channel = 1;
    MnemonicName mnemonic_name = 2;
}

message ClassClause {
    enum Type {
        ALPHA_NUMERIC = 0;
        NATIONAL = 1;
    }
    ClassName class_name = 1;
    Type type = 2;
    repeated ClassClauseThrough class_throughs = 3;
}

message ClassClauseThrough {
    oneof from {
        Identifier identifier_from = 1;
        Literal literal_from = 2;
    };
    oneof to {
        Identifier identifier_to = 3;
        Literal literal_to = 4;
    };
}

message CurrencySignClause {
    Literal currency_literal = 1;
    Literal picture_symbol_literal = 2;
}

message DecimalPointClause {

}

message DefaultDisplaySignClause {
    enum Type {
        LEADING = 0;
        TRAILING = 1;
    }
    Type type = 1;
}

message OdtClause {
    MnemonicName mnemonic_name = 1;
}

message ReserveNetworkClause {

}

message SymbolicCharactersClause {
    enum Type {
        ALPHA_NUMERIC = 0;
        NATIONAL = 1;
    }
    Type type = 1;
}

message InputOutputSection {
    FileControlParagraph file_control_paragraph = 1;
    IoControlParagraph io_control_paragraph = 2;
}

message FileControlParagraph {
    repeated FileControlEntry file_control_entries = 1;
}

message FileControlEntry {
    FileName file_name = 1;
    SelectClause select_clause = 2;
    AlternateRecordKeyClause alternate_record_key_clause = 3;
    AssignClause assign_clause = 4;
    FileStatusClause file_status_clause = 6;
    OrganizationClause organization_clause = 7;
    PaddingCharacterClause padding_character_clause = 8;
    PasswordClause password_clause = 9;
    RecordDelimiterClause record_delimiter_clause = 10;
    RecordKeyClause record_key_clause = 11;
    RelativeKeyClause relative_key_clause = 12;
    ReserveClause reserve_clause = 13;
    AccessModeClause access_mode_clause = 14;
}

message SelectClause {
    FileName file_name = 1;
    bool optional = 2;
}

message AssignClause {
    enum Type {
        DISK =  0;
        DISPLAY = 1;
        KEYBOARD = 2;
        PORT = 3;
        PRINTER = 4;
        READER = 5;
        REMOTE = 6;
        TAPE = 7;
        VIRTUAL = 8;
    }
    oneof to_value {
        Type type = 1;
        AssignmentName assignment_name = 2;
        Literal literal = 3;
    };
}

message ReserveClause {
    IntegerLiteral value = 1;
}

message OrganizationClause {
    enum Mode {
        INDEXED = 0;
        RELATIVE = 1;
        SEQUENTIAL = 2;
    }

    enum Type {
        BINARY = 0;
        LINE = 1;
        RECORD = 2;
        RECORD_BINARY = 3;
    }

    Mode mode = 1;
    Type type = 2;
}

message PaddingCharacterClause {
    oneof padding_character {
        QualifiedDataName qualified_data_name = 1;
        Literal literal = 2;
    };
}

message RecordDelimiterClause {
    enum Type {
        ASSIGNMENT = 0;
        IMPLICIT = 1;
        STANDARD_1 = 2;
    }
    Type type = 1;
    AssignmentName assignment_name = 2;
}

message AccessModeClause {
    enum Mode {
        DYNAMIC = 0;
        EXCLUSIVE = 1;
        RANDOM = 2;
        SEQUENTIAL = 3;
    }
    Mode mode = 1;
}

message RecordKeyClause {
    PasswordClause password_clause = 1;
    QualifiedDataName qualified_data_name = 2;
}

message AlternateRecordKeyClause {
    PasswordClause password_clause = 1;
    QualifiedDataName qualified_data_name = 2;
}

message PasswordClause {
    DataName data_name = 1;
}

message FileStatusClause {
    QualifiedDataName qualified_data_name_1 = 1;
    QualifiedDataName qualified_data_name_2 = 2;
}

message RelativeKeyClause {
    QualifiedDataName qualified_data_name = 2;
}


message IoControlParagraph {
    string file_name = 1;
    CommitmentControlClause commitment_control_clause = 2;
    MultipleFileClause multiple_file_clause = 3;
    RerunClause rerun_clause = 4;
    repeated SameClause same_clauses = 5;
}

message RerunClause {
    oneof on_value {
        AssignmentName assignment_name = 1;
        FileName file_name = 2;
    };
    RerunEveryClock rerun_every_clock = 3;
    RerunEveryOf rerun_every_of = 4;
    RerunEveryRecords rerun_every_records = 5;
}

message RerunEveryRecords {
    IntegerLiteral records = 1;
}

message RerunEveryOf {
    enum Type {
        REEL = 0;
        UNIT = 1;
    }
    Type type = 1;
    FileName file_name = 2;
}

message RerunEveryClock {
    IntegerLiteral clock_units = 1;
}

message SameClause {
    enum Form {
        RECORD = 0;
        SORT = 1;
        SORT_MERGE = 2;
    }
    repeated FileName file_names = 1;
    Form form = 2;
}

message MultipleFileClause {
    repeated MultipleFilePosition multiple_file_positions = 1;
}

message MultipleFilePosition {
    IntegerLiteral position = 1;
    FileName file_name = 2;
}

message CommitmentControlClause {
    FileName file_name = 1;
}

message DataDivision {
    CommunicationSection communication_section = 1;
    DataBaseSection data_base_section = 2;
    FileSection file_section = 3;
    LinkageSection linkage_section = 4;
    LocalStorageSection local_storage_section = 5;
    ProgramLibrarySection program_library_section = 6;
    ReportSection report_section = 7;
    ScreenSection ScreenSection = 8;
    WorkingStorageSection working_storage_section = 9;
}

message FileSection {
    repeated FileDescriptionEntry file_description_entries = 1;
}

message FileDescriptionEntry {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    Type type = 1;
    FileName file_name = 4;
    BlockContainsClause block_contains_clause = 5;
    CodeSetClause code_set_clause = 6;
    DataRecordsClause data_records_clause = 7;
    ExternalClause external_clause = 8;
    GlobalClause global_clause = 9;
    LabelRecordsClause label_records_clause = 10;
    LinageClause linage_clause = 11;
    RecordContainsClause record_contains_clause = 12;
    ReportClause report_clause = 13;
    ValueOfClause value_of_clause = 14;
}

message ExternalClause {
    bool external = 1;
}

message GlobalClause {
    bool global = 1;
}

message BlockContainsClause {
    enum Unit {
        CHARACTERS = 0;
        RECORDS = 1;
    }
    IntegerLiteral from = 1;
    IntegerLiteral to = 2;
    Unit unit = 3;
}

message RecordContainsClause {
    IntegerLiteral from = 1;
    IntegerLiteral to = 2;
    bool varying = 3;
    QualifiedDataName qualified_data_name = 4;
}

message LabelRecordsClause {
    enum Type {
        DATA_NAMES = 0;
        OMITTED = 1;
        STANDARD = 2;
    }
    Type type = 1;
    repeated DataName data_names = 2;
}

message ValueOfClause {
    repeated ValuePair value_pairs = 2;
}

message ValuePair {
    SystemName system_name = 1;
    oneof value {
        QualifiedDataName qualified_data_name = 2;
        Literal literal = 3;
    };
}

message DataRecordsClause {
    repeated DataName data_names = 1;
}

message DataNameOrIntegerLiteral {
    DataName data_name = 1;
    IntegerLiteral integer_literal = 2;
}

message LinageClause {
    DataNameOrIntegerLiteral footing_at = 1;
    DataNameOrIntegerLiteral lines_at_bottom = 2;
    DataNameOrIntegerLiteral lines_at_top = 3;
    DataNameOrIntegerLiteral number_of_lines = 4;
}

message CodeSetClause {
    AlphabetName alphabet_name = 1;
}

message ReportClause {
    repeated ReportName report_names = 1;
}

message WorkingStorageSection {
    DataDescriptionEntryContainer.Type container_type = 1;
}

message DataDescriptionEntryContainer {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    Type type = 1;
}

message ScreenSection {
    repeated ScreenDescriptionEntry screen_description_entries = 1;
}

message ScreenDescriptionEntry {
    // TODO:
}

message ReportSection {
    repeated ReportDescription report_descriptions = 1;
}

message ReportDescription {
    // TODO:
}

message ProgramLibrarySection {
    repeated LibraryDescriptionEntry library_description_entries = 1;
}

message LibraryDescriptionEntry {
    // TODO:
}

message LocalStorageSection {
    DataDescriptionEntryContainer.Type container_type = 1;
    string name = 2;
}

message LinkageSection {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    Type type = 1;
}

message CommunicationSection {
    enum Type {
        COMMUNICATION_SECTION = 0;
        FILE_DESCRIPTION_ENTRY = 1;
        LINKAGE_SECTION = 2;
        LOCAL_STORAGE_SECTION = 3;
        WORKING_STORAGE_SECTION = 4;
    }
    repeated CommunicationDescriptionEntry communication_description_entries = 1;
    Type type = 2;
}

message CommunicationDescriptionEntry {

}

message DataBaseSection {
    repeated DataBaseSectionEntry data_base_section_entries = 1;
}

message DataBaseSectionEntry {

}

message ProcedureDivision {

}

// arithmetic expression ----------------------------------

message ArithmeticExpression {
    // TODO:
}

// condition ----------------------------------

// relation ----------------------------------

// identifier ----------------------------------

message Identifier {
    oneof one_of {
        QualifiedDataName qualified_data_name = 1;
        TableCall table_call = 2;
        FunctionCall function_call = 3;
        SpecialRegister special_register = 4;
    }
}

message TableCall {
    QualifiedDataName qualified_data_name = 1;
    repeated Subscript subscripts = 2;
    ReferenceModifier reference_modifier = 3;
}

message FunctionCall {
    FunctionName function_name = 1;
    repeated Argument arguments = 2;
    ReferenceModifier reference_modifier = 3;
}

message ReferenceModifier {
    CharacterPosition character_position = 1;
    Length length = 2;
}

message CharacterPosition {
    ArithmeticExpression arithmetic_expression = 1;
}

message Length {
    ArithmeticExpression arithmetic_expression = 1;
}

message Subscript {
    oneof one_of {
        bool all = 1;
        IntegerLiteral integer_literal = 2;
        QualifiedDataNameIntegerLiteral qualified_data_name = 3;
        IndexNameIntegerLiteral index_name = 4;
        ArithmeticExpression arithmetic_expression = 5;
    }
}

message Argument {
    oneof one_of {
        Literal literal = 1;
        Identifier identifier = 2;
        QualifiedDataNameIntegerLiteral qualified_data_name = 3;
        IndexNameIntegerLiteral index_name = 4;
        ArithmeticExpression arithmetic_expression = 5;
    }
}

message QualifiedDataNameIntegerLiteral {
    QualifiedDataName qualified_data_name = 1;
    IntegerLiteral integer_literal = 2;
}

message IndexNameIntegerLiteral {
    IndexName index_name = 1;
    IntegerLiteral integer_literal = 2;
}

// qualified data name ----------------------------------

message QualifiedDataName {
    oneof one_of {
        QualifiedDataNameFormat1 f1 = 1;
        QualifiedDataNameFormat2 f2 = 2;
        QualifiedDataNameFormat3 f3 = 3;
        QualifiedDataNameFormat4 f4 = 4;
    }
}

message QualifiedDataNameFormat1 {
    oneof one_of {
        DataName data_name = 1;
        ConditionName condition_name = 2;
    }
    repeated InData in_datas = 3;
    repeated InTable in_tables = 4;
    InFile in_file = 5;
}

message QualifiedDataNameFormat2 {
    ParagraphName paragraph_name = 1;
    InSection in_section = 2;
}

message QualifiedDataNameFormat3 {
    TextName text_name = 1;
    InLibrary in_library = 2;
}

message QualifiedDataNameFormat4 {
    InFile in_file = 1;
}

// in ----------------------------------

message InData {
    DataName data_name = 2;
}

message InFile {
    FileName file_name = 2;
}

message InMnemonic {
    MnemonicName mnemonic_name = 2;
}

message InSection {
    SectionName section_name = 2;
}

message InLibrary {
    LibraryName library_name = 2;
}

message InTable {
    TableCall table_call = 1;
}

// names ----------------------------------

message AlphabetName {
    CobolWord cobol_word = 1;
}

message AssignmentName {
    SystemName system_name = 1;
}

message BasisName {
    ProgramName program_name = 1;
}

message CdName {
    CobolWord cobol_word = 1;
}

message ClassName {
    CobolWord cobol_word = 1;
}

message ComputerName {
    SystemName system_name = 1;
}

message ConditionName {
    CobolWord cobol_word = 1;
}

message DataName {
    CobolWord cobol_word = 1;
}

message DataDescName {
    string value = 1;
}

message EnvironmentName {
    SystemName system_name = 1;
}

message FileName {
    CobolWord cobol_word = 1;
}

message FunctionName {
    string value = 1;
}

message IndexName {
    CobolWord cobol_word = 1;
}

message LanguageName {
    SystemName system_name = 1;
}

message LibraryName {
    CobolWord cobol_word = 1;
}

message LocalName {
    CobolWord cobol_word = 1;
}

message MnemonicName {
    CobolWord cobol_word = 1;
}

message ParagraphName {
    oneof one_of {
         CobolWord cobol_word = 1;
         IntegerLiteral integer_literal = 2;
    }
}

message ProcedureName {
    oneof one_of {
        ParagraphName paragraph_name = 1; // TODO:
        SectionName section_name = 2;
   }
}

message ProgramName {
    oneof one_of {
        NonNumericLiteral non_numeric_literal = 1;
        CobolWord cobol_word = 2;
    }
}

message RecordName {
    // TODO:
}

message ReportName {
    // TODO:
}

message RoutingName {
    CobolWord cobol_word = 1;
}

message ScreenName {
    CobolWord cobol_word = 1;
}

message SectionName {
    oneof one_of {
         CobolWord cobol_word = 1;
         IntegerLiteral integer_literal = 2;
    }
}

message SystemName {
    CobolWord cobol_word = 1;
}

message SymbolicCharacter {
    CobolWord cobol_word = 1;
}

message TextName {
    CobolWord cobol_word = 1;
}

// literal ----------------------------------

message CobolWord {
    string value = 1;
}


message Literal {
    enum Type {
        BOOLEAN = 0;
        CICS_DFH_RESP = 1;
        CICS_DFH_VALUE = 2;
        FIGURATIVE_CONSTANT = 3;
        NON_NUMERIC = 4;
        NUMERIC = 5;
    }
    Type type = 1;
    oneof one_of {
        NumericLiteral numeric_literal = 2;
        BooleanLiteral boolean_literal = 3;
        NonNumericLiteral non_numeric_literal = 4;
        FigurativeConstant figurative_constant = 5;
        // cicsDfhRespLiteral
        // cicsDfhValueLiteral
    }
}

message BooleanLiteral {
    bool value = 1;
}

message NumericLiteral {
    enum Type {
        FLOAT = 0;
        INTEGER = 1;
    }
    Type type = 1;
    string value = 2;
}

message IntegerLiteral {
    string value = 1;
}

message FigurativeConstant {
    enum Type {
        ALL = 0;
        HIGH_VALUE = 1;
        HIGH_VALUES = 2;
        LOW_VALUE = 3;
        LOW_VALUES = 4;
        NULL = 5;
        NULLS = 6;
        QUOTE = 7;
        QUOTES = 8;
        SPACE = 9;
        SPACES = 10;
        ZERO = 11;
        ZEROES = 12;
        ZEROS = 13;
    }
    Type type = 1;
    Literal literal = 2;
}

message SpecialRegister {
    // TODO:
}

message NonNumericLiteral {
    string value = 1;
}

message StringLiteral {
    string value = 1;
}

message DbcsLiteral {
    string value = 1;
}

message HexNumber {
    string value = 1;
}

message NullTerminated {
    string value = 1;
}